# PURPOSE: 
#   CONVERT AN INPUT FILE TO AN OUTPUT FILE
#   WITH LOWER CASE TO UPPER CASE.

.SECTION .DATA

.EQU SYS_OPEN, 2
.EQU SYS_READ, 0
.EQU SYS_WRITE, 1
.EQU SYS_CLOSE, 3
.EQU SYS_EXIT, 60

.EQU O_RDONLY, 0
.EQU O_CREAT_WRONLY_TRUNC, 03101
.EQU PERMISSION, 0666

.EQU STDIN, 0
.EQU STDOUT, 1
.EQU STDERR, 2

.EQU END_OF_FILE, 0
.EQU NUMBER_ARGUMENTS, 2

.SECTION .BSS

.EQU BUFFER_SIZE, 1024
.LCOMM BUFFER, BUFFER_SIZE

.SECTION .TEXT

.EQU ST_SIZE_RESERVE, 16
.EQU ST_FD_IN, -8
.EQU ST_FD_OUT, -16
.EQU ST_ARGC, 0     # NUMBER OF ARGUMENTS
.EQU ST_ARGV_0, 8   # NAME OF THE PROGRAM
.EQU ST_ARGV_1, 16  # INPUT FILE NAME
.EQU ST_ARGV_2, 24  # OUTPUT FILE NAME

.GLOBL _START

_START:
    MOV %RSP, %RBP
    SUB $ST_SIZE_RESERVE, %RSP

# VARIABLES:
#   %RAX - SYSTEM CALL
#   %RDI - FIRST ARGUMENT
#   %RSI - SECOND ARGUMENT
#   %RDX - THIRD ARGUMENT

OPEN_FILES:
OPEN_FD_IN:
    MOV $SYS_OPEN, %RAX
    MOV ST_ARGV_1(%RBP), %RDI
    MOV $O_RDONLY, %RSI
    MOV $PERMISSION, %RDX
    SYSCALL    

STORE_FD_IN:
    MOV %RAX, ST_FD_IN(%RBP)

OPEN_FD_OUT:
    MOV $SYS_OPEN, %RAX
    MOV ST_ARGV_2(%RBP), %RDI
    MOV $O_CREAT_WRONLY_TRUNC, %RSI
    MOV $PERMISSION, %RDX
    SYSCALL

STORE_FD_OUT:
    MOV %RAX, ST_FD_OUT(%RBP)


READ_LOOP_BEGIN:
    MOV $SYS_READ, %RAX
    MOV ST_FD_IN(%RBP), %RDI
    MOV $BUFFER, %RSI
    MOV $BUFFER_SIZE, %RDX
    SYSCALL

    CMP $END_OF_FILE, %RAX
    JLE END_LOOP

CONTINUE_READ_LOOP:
    PUSH $BUFFER
    PUSH %RAX     # PUSH NUMBER OF BYTES READ
    CALL CONVERT_TO_UPPER
    POP %RAX      # GET THE SIZE BACK
    ADD $8, %RSP  # CLEAR STACK

    MOV %RAX, %RDX
    MOV $SYS_WRITE, %RAX
    MOV ST_FD_OUT(%RBP), %RDI
    MOV $BUFFER, %RSI
    SYSCALL

    JMP READ_LOOP_BEGIN

END_LOOP:
    MOV $SYS_CLOSE, %RAX
    MOV ST_FD_OUT(%RBP), %RDI
    SYSCALL

    MOV $SYS_CLOSE, %RAX
    MOV ST_FD_IN(%RBP), %RDI
    SYSCALL

    MOV $SYS_EXIT, %RAX
    MOV $0, %RDI
    SYSCALL
    

# PURPOSE: 
#   CONVERT LOWER CASE LETTERS IN THE BUFFER TO UPPER CASE.
#
# INPUT:
#   BUFER
#   BUFER SIZE
#
# OUTPUT:
#   CONVERTED BUFFER
#
# VARIABLES:
#   %RAX - BUFFER
#   %RBX - BUFFER SIZE
#   %RDI - CURRENT OFFSET
#   %CL - CURRENT BYTE

.EQU LOWER_CASE_A, 'A'
.EQU LOWER_CASE_Z, 'Z'
.EQU UPPER_CONVERSION, 'A' - 'A'

.EQU ST_BUFFER_SIZE, 16
.EQU ST_BUFFER, 24

CONVERT_TO_UPPER:
    PUSH %RBP
    MOV %RSP, %RBP

    MOV ST_BUFFER(%RBP), %RAX
    MOV ST_BUFFER_SIZE(%RBP), %RBX
    MOV $0, %RDI

    CMP $0, %RBX
    JE END_CONVERT_LOOP

CONVERT_LOOP:
    MOV (%RAX, %RDI, 1), %CL

    CMP $LOWER_CASE_A, %CL
    JL NEXT_BYTE
    CMP $LOWER_CASE_Z, %CL
    JG NEXT_BYTE

    ADD $UPPER_CONVERSION, %CL
    MOV %CL, (%RAX, %RDI, 1)

NEXT_BYTE:
    INC %RDI
    CMP %RDI, %RBX
    JNE CONVERT_LOOP

END_CONVERT_LOOP:
    MOV %RBP, %RSP
    POP %RBP
    RET
